{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  Pythagoras approach\n# \n# ------------------------------------------\n\n# Add project code in \"main\"\n\n\nfrom vexcode import *\n\ndef move(x_loc, y_loc):\n    b = x_loc - location.position(X,MM)\n    c = y_loc - location.position(Y,MM)\n\n    if b == 0 and c == 0:\n        pass\n    else:\n        a= math.sqrt(b**2 + c**2)\n        angle = math.asin((math.sin(math.pi/2) * b) / a) / math.pi * 180\n\n        if c < 0:\n            angle = 180 - angle\n        \n        drivetrain.turn_to_heading(angle, DEGREES)\n        drivetrain.drive_for(FORWARD, a, MM)\n\n\ndef main():\n    cords_list = []\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    cords_list.append([location.position(X, MM), location.position(Y, MM)])\n\n    while not down_eye.detect(RED):\n        if front_distance.get_distance(MM) > 260:\n            drivetrain.drive_for(FORWARD, 250, MM)\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n            if cords_list[len(cords_list) - 2][0] < location.position(X, MM) + 5 and cords_list[len(cords_list) - 2][0] > location.position(X, MM)- 5 and cords_list[len(cords_list) - 2][1] < location.position(Y, MM)+ 5 and cords_list[len(cords_list) -2][1] > location.position(Y, MM)- 5:\n                cords_list.pop()\n                cords_list.pop()\n\n            cords_list.append([location.position(X, MM), location.position(Y, MM)])\n        else:\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n        wait(5, MSEC)\n    \n    while True:\n        pen.set_pen_color(BLACK)\n        pen.move(DOWN)\n        cords_list.reverse()\n\n        for i in range(len(cords_list)):\n            move(cords_list[i][0], cords_list[i][1])\n           \n# VR threads â€” Do not delete\nvr_thread(main)","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}